#include "./Neighbour_Counting_Board.h"
#include <boost/dynamic_bitset.hpp>

#ifndef TOOFEWBITS
#define TOOFEWBITS

class too_few_bits_exception: public std::exception {
    virtual const char* what() const throw() {
        return "Requested more random bits than the system can supply in one go";
    }
};

#endif

#ifndef CRYPTOGRAPHIC_GOL_BOARD
#define CRYPTOGRAPHIC_GOL_BOARD

/// @brief A GOL-Board with flexible, customizable, rules - slower than a class where the rules are hardcoded
/// @tparam TYPE u_intX_t used to store the bord, simultaneously sets width of GOL-Board (eg. u_int32_t, sets the width to 32)
/// @tparam size height of the GOL-Board
class CCA_Board: public Neighbour_Counting_Board<u_int64_t> {
    const static int size = 64;
    constexpr static u_int64_t pi[64] = {
        0b1100100100001111110110101010001000100001011010001100001000110100,
        0b1100010011000110011000101000101110000000110111000001110011010001,
        0b0010100100000010010011100000100010001010011001111100110001110100,
        0b0000001000001011101111101010011000111011000100111001101100100010,
        0b0101000101001010000010000111100110001110001101000000010011011101,
        0b1110111110010101000110011011001111001101001110100100001100011011,
        0b0011000000101011000010100110110111110010010111110001010000110111,
        0b0100111111100001001101010110110101101101010100011100001001000101,
        0b1110010010000101101101010111011001100010010111100111111011000110,
        0b1111010001001100010000101110100110100110001101111110110101101011,
        0b0000101111111111010111001011011011110100000001101011011111101101,
        0b1110111000111000011010111111101101011010100010011001111110100101,
        0b1010111010011111001001000001000101111100010010110001111111100110,
        0b0100100100101000011001100101000111101100111001000101101100111101,
        0b1100001000000000011111001011100010100001011000111011111100000101,
        0b1001100011011010010010000011011000011100010101011101001110011010,
        0b0110100100010110001111111010100011111101001001001100111101011111,
        0b1000001101100101010111010010001111011100101000111010110110010110,
        0b0001110001100010111100110101011000100000100001010101001010111011,
        0b1001111011010101001010010000011101110000100101101001011001101101,
        0b0110011100001100001101010100111001001010101111001001100000000100,
        0b1111000101110100011011000000100011001010000110000010000101111100,
        0b0011001010010000010111100100011000101110001101101100111000111011,
        0b1110001110011110011101110010110000011000000011101000011000000011,
        0b1001101100100111100000111010001011101100000001111010001010001111,
        0b1011010111000101010111011111000001101111010011000101001011001001,
        0b1101111000101011110010111111011010010101010110000001011100011000,
        0b0011100110010101010010010111110011101010100101010110101011100101,
        0b0001010111010010001001100001100010011000111110100000010100010000,
        0b0001010101110010100011100101101010001010101010101100010000101101,
        0b1010110100110011000101110000110100000100010100000111101000110011,
        0b1010100001010101001000011010101111011111000111001011101001100100,
        0b1110110011111011100001010000010001011000110110111110111100001010,
        0b1000101011101010011100010101011101011101000001100000110001111101,
        0b1011001110010111000011111000010110100110111000011110010011000111,
        0b1010101111110101101011101000110011011011000010010011001111010111,
        0b0001111010001100100101001110000001001010001001010110000110011101,
        0b1100111011100011110100100010011000011010110100101110111001101011,
        0b1111000100101111111110100000011011011001100010100000100001100100,
        0b1101100001110110000000100111001100111110110010000110101001100100,
        0b0101001000011111001010110001100000010111011110110010000000001100,
        0b1011101111100001000101110101011101111010011000010101110101101100,
        0b0111011100001001100010001100000010111010110110010100011011100010,
        0b0000100011100010010011111010000001110100111001011010101100110001,
        0b0100001111011011010110111111110011100000111111010001000010001110,
        0b0100101110000010110100010010000010101001001000010000100000000001,
        0b0001101001110010001111000001001010100111100001111110011011010111,
        0b1000100001110001100110100001000010111101101110100101101100100110,
        0b1001100111000011001001110001100001101010111101001110001000111100,
        0b0001101010010100011010000011010010110110000101010000101111011010,
        0b0010010110000011111010011100101000101010110101000100110011101000,
        0b1101101110111011110000101101101100000100110111101000111011111001,
        0b0010111010001110111111000001010000011111101111101100101010100110,
        0b0010100001111100010110010100011101001110011010111100000001011101,
        0b1001100110110010100101100100111110100000100100001100001110100010,
        0b0010001100111011101000011000011001010001010110111110011111101101,
        0b0001111101100001001010010111000011001110111000101101011110101111,
        0b1011100000011011110111010111011000100001011100000100100000011100,
        0b1101000000000110100100010010011111010101101100000101101010101001,
        0b1001001110110100111010101001100010001101100011111101110111000001,
        0b1000011011111111101101111101110010010000101001101100000010001111,
        0b0100110111110100001101011100100100110100000000101000010010010010,
        0b0011011011000011111110101011010011010010011111000111000000100110,
        0b1100000111010100110111001011001001100000001001100100011011011110
    };

    u_int64_t seed;
    public:
    /// @brief Default constructor, set the rules to "vanilla" Conway GOL 
    CCA_Board(unsigned int _seed);
    CCA_Board();

    /// @brief Does one GOL-Update step
    void step(); 

    /// @brief Does multiple steps in a loop
    /// @param steps (int) number of steps the system should take
    void steps(int steps);

    /// @brief updates the GOL-Board based on the LSB- and MSB-board
    void update_GOL_board();

    /// @brief spreads the seed over the board to initialize the random state
    void create_seed_map();

    /// @brief Applies a xor-map to the board
    /// @param xor_map u_int64_t array of length 64, will be xor-ed against the current state of the board
    void apply_xor_map(Bit_Board<u_int64_t> xor_map);

    /// @brief returns the seed
    /// @return u_int64_t seed used to seed the board
    unsigned int get_seed();


    /// @brief Sets the seed, create_seed_map needs to be called after this for this to have any effect
    /// @param _seed u_int64_t seed used in create_seed_map
    void set_seed(u_int64_t _seed);

};
#endif